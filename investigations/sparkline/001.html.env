<html>
<p>
Example of Sparkline component.
</p>
<script crossorigin 
  src="https://unpkg.com/react@16/umd/react.development.js">
</script>
<script crossorigin 
  src="https://unpkg.com/react-dom@16/umd/react-dom.development.js">
</script>
<script crossorigin
  src="https://unpkg.com/d3@3.5.9/d3.js">
</script>
<script crossorigin 
  src="https://unpkg.com/babel-standalone@6.26.0/babel.js">
</script>

<!-- Following from: https://reactjs.org/docs/state-and-lifecycle.html -->

<p>Sparkline ver $SPARKLINE_VER </p>

<div id="root"></div>
<script type="text/babel">

// DEPENDENCIES
const {
    useState,
    useEffect,
    useReducer,
    useCallback,
    useMemo,
    createContext,
    useContext 
} = React;

const { 
    range, 
    select,
    scaleLinear 
} = d3;

const { render } = ReactDOM;

// DEBUG
localStorage.clear();


// MODEL

if (localStorage.getItem("model") === null) {
    setObject("model",
        { 
            isStreamOn: false,
            data: []
        }
    );
}

const MOUNT_POINT = document.getElementById("root");

function updateView() {
    return () => render(
        <Provider>
            <Display />
            <ControllerDisplay />
        </Provider>,
        MOUNT_POINT 
    );
}

function getObject(key) {
    return JSON.parse(localStorage.getItem(key));
}

function setObject(key, obj) {
    localStorage.setItem(key, JSON.stringify(obj))
    return obj;
}

function getModel() {
    return getObject("model");
}

function setModel(obj) {
    setObject("model", obj);
    //updateView();
    return;
}

const ACTION = {};

function reducer(state = getObject("model"), action) {
    switch(action.type) {
        case "TOGGLE_STREAM":
            setObject("model", {...state, isStreamOn: !state.isStreamOn});
            return { ...state, isStreamOn: !state.isStreamOn };
        default:
            return state    
    }
}

function asyncer(dispatch, state) {
    return function(action) {
        typeof action === "function" ? 
            action(dispatch, state) : 
            dispatch(action)
    }
}

const GlobalStore = createContext();
console.log("GlobalStore: ", GlobalStore);


/* I think there would be a dispatchProvider and a stateProvider */

// https://kentcdodds.com/blog/how-to-use-react-context-effectively
// https://aheadcreative.co.uk/articles/learning-react-context-api/

function Provider({ children }) {
    const [ state, dispatchBase ] = useReducer(reducer, getObject("model"));
    const dispatch = useCallback(asyncer(dispatchBase, state), []);
    // dispatch(getData);
    const value = useMemo(() => ({view: state, dispatch}));

    return (
        <GlobalStore.Provider value={value}>
            {children}
        </GlobalStore.Provider>
    );
}


//CONTROLLERS

function handleGetData(url, dispatch) {
    const model = getObject("model");
    if (model.isStreamOn) { 
        fetch(url)
            .then(handleErrors)
            .then(response => response.json())
            .then(function(response) {
                dispatch({ type: "STREAM_DATA", payload: response });
                setObject({...model, data: response});
            })
            .catch(function(error) {
                dispatch({ type: "ERROR", payload: "An error has occurred" });
                setObject({...model, isStreamOn: false});
            })
    }
}

function useGlobalStore() {
    const context = useContext(GlobalStore);
    if (context === undefined) {
        throw new Error("Error thrown");
    }
    /* context: { view, dispatch } */
    return context;
}


// VIEW

function Display() {
    // view.number (going to increment)
    const { view } = useGlobalStore();
    console.log("Display: ", view);
    return <h1>hello</h1>;
}

function ControllerDisplay() {
    const { dispatch } = useGlobalStore();
    console.log("Controller:", dispatch);
    return (
        <button onClick={() => alert("button clicked")}>
            Click here
        </button>
    );
}

// https://codesandbox.io/s/react-codesandbox-je6cc?file=/src/count.js

render(
    <Provider>
        <Display />
        <ControllerDisplay />
    </Provider>,
    MOUNT_POINT
);


function handleErrors(response) {
    if (!response.ok) {
        throw Error(response.statusText);
    }
    return response;
}

///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
/*
function App() {
    const [data, setData] = useState(false);
    const [doStream, setDoStream] = useState(model.isStreamOn);

    model.updateViewState = function () {
        console.log("in updateViewState");
        setDoStream(model.isStreamOn);
    };

    useEffect(function() {
        const interval = setInterval(function() {
            //console.log("in interval: model:",model);
            if(model.isStreamOn === true){
                 getData("http://$SPARKLINE_IP:$HTTP_PORT/json",
                     setData, doStream);
             }
             
        },
            1000
        );

        return () => clearInterval(interval);

    }, [])

    return (
        <React.Fragment>
            <View {...data} />
            <button onClick={() => setDoStream(!doStream)}>
                { doStream ? "Turn Off Stream" : "Turn On Stream" }
            </button>
        </React.Fragment>
    );
}

*/
/*
    useEffect(function() {
        if( doStream ) {

            // setInterval will take a function
            const interval = setInterval(function() {
                getData("http://$SPARKLINE_IP:$HTTP_PORT/json", setData);
            },
                1000
            );

            return () => clearInterval(interval);
        }

        if (!doStream) {
            return null;
        }

    }, [])
*/

/*
function tick() {
  fetch('http://$SPARKLINE_IP:$HTTP_PORT/json')
  .then(handleErrors)
  .then(response => response.json())
  .then(function(response) {
        console.log("ok");
        setState(response);
        console.log("Here is state.data: ", state.data);
    }).catch(function(error) {
        console.log(error);
    });
*/
/*  
  .then(response => response.json())
   <p>Sparkline response: {JSON.stringify(response.json)} </p>
*/
/*  let element = (
    <div>
      <h1>Sparklines</h1>
      <h2>It is {new Date().toLocaleTimeString()}.</h2>
      <p>Generated at Fri Dec 11 22:34:23 PST 2020. </p>
      <p> Fetching from: $IP:$JSON_PORT </p>
    </div>
  );  

  ReactDOM.render(
    element,
    document.getElementById('root')
  );
}
*/

//const mountPoint = document.getElementById("root");
//ReactDOM.render(<App  />, mountPoint);

//setInterval(tick, 1000);

</script>
</html>
