<html>
<p>
Example of Sparkline component.
</p>


<!-- Following from: https://reactjs.org/docs/state-and-lifecycle.html -->
<body>

<p>Sparkline ver $SPARKLINE_VER </p>

<div id="root"></div>
<script crossorigin 
  src="https://unpkg.com/react@16/umd/react.development.js">
</script>
<script crossorigin 
  src="https://unpkg.com/react-dom@16/umd/react-dom.development.js">
</script>
<script crossorigin
  src="https://unpkg.com/d3@3.5.9/d3.js">
</script>
<script crossorigin 
  src="https://unpkg.com/babel-standalone@6.26.0/babel.js">
</script>
<script type="text/babel">

// CITATION
// https://redux.js.org/style-guide/style-guide#treat-reducers-as-state-machines
// https://medium.com/strands-tech-corner/react-state-management-without-redux-d39c7087039d
// https://codesandbox.io/s/react-codesandbox-je6cc?file=/src/count.js
// https://kentcdodds.com/blog/how-to-use-react-context-effectively
// https://aheadcreative.co.uk/articles/learning-react-context-api/

// DEPENDENCIES
const {
    useState,
    useEffect,
    useReducer,
    useCallback,
    useMemo,
    createContext,
    useContext 
} = React;

const { 
    range, 
    select,
    scaleLinear 
} = d3;

const { render, hydrate, unmountComponentAtNode } = ReactDOM;

const DATA_SERVER_URL = "http://165.227.30.170:$HTTP_PORT/json";

// DEBUG
localStorage.clear();

// MODEL

// MODEL INIT
if (localStorage.getItem("model") !== null) {
    setModel({...getModel()});
}

if (localStorage.getItem("model") === null) {
    setObject("model",
        { 
            isStreamOn: false,
            data: [{ id: 1, type: "random.number", data: 121 }],
            number: 0
        }
    );
}


const MOUNT_POINT = document.getElementById("root");

/*
function updateView() {
    return () => render(
        <Provider>
            <Display />
            <ControllerDisplay />
        </Provider>,
        MOUNT_POINT 
    );
}
*/

function updateView() {
    render(<Test />, MOUNT_POINT);
}

function getObject(key) {
    return JSON.parse(localStorage.getItem(key));
}

function setObject(key, obj) {
    localStorage.setItem(key, JSON.stringify(obj))
    return obj;
}

function getModel() {
    return getObject("model");
}

/*
function setModel(obj) {
    setObject("model", obj);
    updateView();
    return;
}
*/

function setModel(obj) {
    setObject("model", obj);
    //unmountComponentAtNode(MOUNT_POINT);
    //render(<Test />, MOUNT_POINT);

    updateView();
}

const ACTION = {
    GET_DATA: "GET_DATA",
    TOGGLE_STREAM: "TOGGLE_STREAM"
};

function reducer(state = getModel(), action) {
    switch(action.type) {
        case ACTION.GET_DATA:
            console.log("length of data in Model: ", getModel().data.length);
            // checks amount of NOMs stored in Model
            const dataArray = getModel().data.length === 20
                // if 20 NOMs, throw out the oldest and add the new one 
                ? [...getModel().data.slice(1), action.payload]
                // otherwise, use what is already there and add the new one
                : [...getModel().data, action.payload];

            console.log("dataArray: ", dataArray);
            // update the model
            setModel({
                ...getModel(),
                data: dataArray
            });

            // display the ten most recent NOMs 
            const { data } = getModel();
            const len = data.length;
            const fromTheMiddle = Math.round((len - 1) / 2);
            const visual = len > 10 
                ? {
                      ...getModel(),
                      data: [...data.slice(fromTheMiddle)]
                } : getModel();
            return visual;
        case ACTION.TOGGLE_STREAM:
            setModel({...state, isStreamOn: !state.isStreamOn});
            return getModel();
        default:
            return state    
    }
}

// END OF MODEL




//CONTROLLERS

function asyncer(dispatch, state) {
    return function(action) {
        typeof action === "function" ? 
            action(dispatch, state) : 
            dispatch(action)
    }
}

const GlobalStore = createContext(); // Refactor name to globalContext

function handleGetData(dispatch, state) {
        fetch(DATA_SERVER_URL)
            .then(handleErrors)
            .then(response => response.json())
            .then(function(response) {
                dispatch({
                    type: "GET_DATA", 
                    payload: response
                });
            })
            .catch(error => console.log(error))
}

/* building up to this
function handleGetData(url, dispatch) {
    fetch(url)
        .then(handleErrors)
        .then(response => response.json)
        .then(function(response) {
            console.log("the response: ", response)
            dispatch({ type: "GET_DATA", payload: response.data });
        }).catch(error => dispatch({ type: "ERROR", payload: "Error" }));

    const model = getObject("model");
    if (model.isStreamOn) { 
        fetch(url)
            .then(handleErrors)
            .then(response => response.json())
            .then(function(response) {
                dispatch({ type: "GET_DATA", payload: response });
            })
            .catch(function(error) {
                dispatch({ type: "ERROR", payload: "An error has occurred" });
            })
    }
}
*/


function useGlobalStore() {
    const context = useContext(GlobalStore);
    if (context === undefined) {
        throw new Error("Error thrown");
    }
    /* context: { view, dispatch } */
    return context;
}
// END OF CONTROLLERS


// VIEW
function Provider({ children }) {
    const [ state, dispatch ] = useReducer(reducer, getObject("model"));

    const actionHandler = asyncer(dispatch, state);
    const dispatchActionOrType = useCallback(actionHandler, []);

    const value = useMemo(() => ({
        view: state,
        dispatch: dispatchActionOrType
    }));

    console.log("Provider has mounted");
    return (
        <GlobalStore.Provider value={value}>
            {children}
        </GlobalStore.Provider>
    );
}

function Node(props) {
    return <span> {props.data} </span>;
}

function createGraphNode(json, i) {
    const { data, id, type } = json;
    return <Node data={data} key={id} />;
}

function Display() {

    console.log("Display has mounted");

    // view.number (going to increment)
    const { view } = useGlobalStore();

    return (
        <React.Fragment>
            <h1>Graph</h1>
            <div>{view.data.map(createGraphNode)}</div>
        </React.Fragment>
    );
}

function ControllerDisplay() {
    console.log("ControllerDisplay has mounted");

    const { view, dispatch } = useGlobalStore();

    useEffect(function() {
        const interval = setInterval(function() {
            if(getModel().isStreamOn) {
                dispatch(handleGetData);
            }             
        },
            1000
        );

        return () => clearInterval(interval);

    }, []);

    return (
        <button onClick={() => dispatch({ type: "TOGGLE_STREAM" })}>
            { !getModel().isStreamOn ? "Turn stream on" : "Turn stream off" }
        </button>
    );

}

function useIsMounted() {
    const [isMounted, setIsMounted] = useState(false);
    useEffect(() => {
        setIsMounted(true);
    }, [])
    return isMounted;
}

function Test() {
/*
    const isMounted = useIsMounted();
    const len = getModel().data.length;
    const nodes = useMemo(() => (
        isMounted ? getModel().data : [{id: 00000, type: "visual.init", data: "hello"}]
    ), [isMounted, len]);
*/
/*
    useEffect(() => {
        console.log("re-render");
        // unmountComponentAtNode(MOUNT_POINT);
        render(
            <Test />,
            MOUNT_POINT
        );
    }, [getModel().data.length]);
*/

    return (
        <React.Fragment>
            <h1>Graph</h1>
            <div>{getModel().data.map(createGraphNode)}</div>
        </React.Fragment>
    );
}

render(
    <Test />,
    MOUNT_POINT
);


function handleErrors(response) {
    if (!response.ok) {
        throw Error(response.statusText);
    }
    return response;
}

///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
/*
function App() {
    const [data, setData] = useState(false);
    const [doStream, setDoStream] = useState(model.isStreamOn);

    useEffect(function() {
        const interval = setInterval(function() {
            if(model.isStreamOn === true){
                 getData("http://$SPARKLINE_IP:$HTTP_PORT/json",
                     setData, doStream);
             }
             
        },
            1000
        );

        return () => clearInterval(interval);

    }, [])

    return (
        <React.Fragment>
            <View {...data} />
            <button onClick={() => setDoStream(!doStream)}>
                { doStream ? "Turn Off Stream" : "Turn On Stream" }
            </button>
        </React.Fragment>
    );
}

*/




/*
    useEffect(function() {
        if( doStream ) {

            // setInterval will take a function
            const interval = setInterval(function() {
                getData("http://$SPARKLINE_IP:$HTTP_PORT/json", setData);
            },
                1000
            );

            return () => clearInterval(interval);
        }

        if (!doStream) {
            return null;
        }

    }, [])
*/

</script>
</body>
</html>
