$HEADER_HTML
$CDN_HTML
<script>
$RINGBUFFER_JS
</script>
<div id="root"></div>
<script type="text/babel">

// DEPENDENCIES
const { useEffect } = React;

const { 
    range, 
    select,
    scaleLinear 
} = d3;

// NEEDS FIXING
// "http://$SPARKLINE_IP:$HTTP_PORT/json"
const DATA_SERVER_URL = "http://165.227.30.170:$HTTP_PORT/json";

// DEBUG
localStorage.clear();

// MODEL INIT

// if local storage does already contain a key named "model"
// set the model to the most recent model
if (localStorage.getItem("model") !== null) {
    setModel({...getModel()});
}

// if local storage does NOT contain a key named "model"
// create the key of "model" and pass its initial state
if (localStorage.getItem("model") === null) {
    setObject("model",
        { 
            isStreamOn: false,
            data: [{ id: 1, type: "random.number", data: 121 }],
        }
    );
}

const MOUNT_POINT = document.getElementById("root");

// MODEL
function updateView(mountPoint = MOUNT_POINT) {
    ReactDOM.render(<App />, mountPoint);
}

function getObject(key) {
    // gets value from local storage by key
    // parses string value to object
    // returns object  
    return JSON.parse(localStorage.getItem(key));
}

function setObject(key, obj) {
    // stringifies object and assigns to key in local storage
    // returns object assignment
    localStorage.setItem(key, JSON.stringify(obj))
    return obj;
}

function getModel() {
    return getObject("model");
}

function setModel(obj) {
    setObject("model", obj);
    updateView(); // re-renders Virtual DOM tree
}


//CONTROLLERS
function handleGetData() {
        // GET
        fetch(DATA_SERVER_URL)
            .then(handleErrors)
            // convert Buffer to JSON
            .then(response => response.json())
            .then(function(response) {
                // set new model
                setModel({
                    // use previous state
                    ...getModel(),
                    // old data plus the new from response
                    data: [...getModel().data, response]
                });
                console.log(getModel().data);
            })
            .catch(error => console.log(error))
}

function handleClick() {
    // use previous state
    setModel({
        ...getModel(),
        // set to opposite boolean value from previous state
        isStreamOn: !getModel().isStreamOn
    });
}

function handleErrors(response) {
    // if response is not ok
    if (!response.ok) {
        throw Error(response.statusText);
    }
    return response;
}


// VIEW
function Node(props) {
    return <span> {props.data} </span>;
}

function createGraphNode(json, i) {
    const { data, id, type } = json;
    return <Node data={data} key={id} />;
}

function App() {
    useEffect(function() {
        const interval = setInterval(function() {
            if(getModel().isStreamOn) {
                handleGetData();
            }             
        },
            1000
        );

        return () => clearInterval(interval);

    }, []);

    return (
        <React.Fragment>
            <h1>Graph</h1>
            <Meter/>
            <button
                onClick={ handleClick }
            >
                { !getModel().isStreamOn ? "Turn stream on" : "Turn stream off" }
            </button>
        </React.Fragment>
    );
}

function Meter(){
    return (
        <React.Fragment>
            <div id="meter">{getModel().data.map(createGraphNode)}</div>
        </React.Fragment> 
    );
}

ReactDOM.render(
    <App />,
    MOUNT_POINT
);
</script>
$FOOTER_HTML
